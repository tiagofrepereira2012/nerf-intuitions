# In this script we will do some batching to reconstruct the 3D scene from the model
# This is to avoid memory issues

from pathlib import Path
import torch
import matplotlib.pyplot as plt
from tqdm import tqdm
import argparse

from volumetric_rendering import rendering


# FOr loading purposes
from voxel_reconstruction import get_rays, Voxels
from nerf import NeRF


@torch.no_grad()
def test(model, o, d, tn, tf, n_bins=100, chunk_size=10, H=400, W=400):
    o = o.chunk(chunk_size, dim=0)
    d = d.chunk(chunk_size, dim=0)

    image = []  # Concatenating the images generated by the rays
    for o_batch, d_batch in tqdm(zip(o, d)):

        img = rendering(model, o_batch, d_batch, tn, tf, n_bins, device=o_batch.device)
        image.append(img)
    image = torch.cat(image, dim=0)
    image = image.reshape(H, W, 3).cpu().numpy()

    return image


def main():

    parser = argparse.ArgumentParser(
        description="Reconstruct the 3D scene from the model"
    )
    parser.add_argument("model_path", type=Path, help="Path to the model")
    parser.add_argument(
        "--database_path", type=Path, help="Path to the database", default=Path("./fox")
    )
    parser.add_argument(
        "-i",
        "--index",
        type=int,
        help="Index of the image to test",
        required=True,
        default=0,
    )

    args = parser.parse_args()

    model_path = args.model_path
    database_path = args.database_path
    index = args.index

    rays_o, rays_d, target_px_values = get_rays(Path(database_path), mode="train")
    # rays_o, rays_d, target_px_values = get_rays(Path(database_path))

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    tn = 8
    tf = 12
    nb_bins = 100

    model = torch.load(model_path).to(device)

    predicted_image = test(
        model, rays_o[index].to(device), rays_d[index].to(device), tn, tf, nb_bins
    )
    target_image = target_px_values[index].cpu().numpy().reshape(400, 400, 3)

    _, ax = plt.subplots(1, 2, figsize=(10, 10))
    ax[0].imshow(predicted_image)
    ax[0].set_title("Predicted")
    ax[1].imshow(target_image)
    ax[1].set_title("Target")
    # plt.savefig("reconstructed_nerf.png")
    plt.show()


if __name__ == "__main__":
    main()
